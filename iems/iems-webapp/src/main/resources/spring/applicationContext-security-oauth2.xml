<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
          http://www.springframework.org/schema/security 
          http://www.springframework.org/schema/security/spring-security-3.2.xsd 
          http://www.springframework.org/schema/context 
          http://www.springframework.org/schema/context/spring-context-3.0.xsd 
          http://www.springframework.org/schema/security/oauth2 
          http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd">

	<security:http pattern="/oauth/token" create-session="stateless"
		authentication-manager-ref="oauth2AuthenticationManager"
		entry-point-ref="oauth2AuthenticationEntryPoint">
		<security:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		
		<security:anonymous enabled="false" />
		<security:http-basic entry-point-ref="oauth2AuthenticationEntryPoint" />

		<security:custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER" />
		<security:access-denied-handler ref="oauth2AccessDeniedHandler" />
	</security:http>

	<security:http pattern="/api/**" create-session="never"
	  authentication-manager-ref="authenticationManager"
		entry-point-ref="oauth2AuthenticationEntryPoint"
		access-decision-manager-ref="oauth2AccessDecisionManager">
		<security:anonymous enabled="false" />

		<security:intercept-url pattern="/api/**" access="ROLE_USER" />

		<security:custom-filter ref="apiResourceServer" before="PRE_AUTH_FILTER" />
		<security:access-denied-handler ref="oauth2AccessDeniedHandler" />
	</security:http>
	
	<!-- 
	<security:http pattern="/api/**" create-session="stateless" security="none" />
	 -->

  <!-- TODO: 
	<bean id="tokenStore"
		class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
		<constructor-arg index="0" ref="dataSource" />
	</bean>
	 -->
	<bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore"/>

	<bean id="tokenServices"
		class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />
	</bean>

  <!-- TODO: 
	<bean id="clientDetailsService"
		class="org.springframework.security.oauth2.provider.client.JdbcClientDetailsService">
		<constructor-arg index="0" ref="dataSource" />
	</bean>
	 -->
	
  
	<oauth2:client-details-service id="clientDetailsService">
		<oauth2:client client-id="client_iems" secret="secret_iems" 
			authorized-grant-types="password,authorization_code,refresh_token,implicit,client_credentials" 
			access-token-validity="12000" 
			scope="read,write,trust" resource-ids="api-resource" />
	</oauth2:client-details-service>
	
  
	<bean id="oauth2ClientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetailsService" />
	</bean>
  
  <security:authentication-manager id="oauth2AuthenticationManager">
    <security:authentication-provider
      user-service-ref="oauth2ClientDetailsUserService" />
  </security:authentication-manager>
  
  
	<bean id="oauth2AuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint" />

	<bean id="oauth2AccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

  <bean id="oauth2AccessDecisionManager"
    class="org.springframework.security.access.vote.UnanimousBased">
    <constructor-arg>
      <list>
        <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
        <bean class="org.springframework.security.access.vote.RoleVoter" />
        <bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
      </list>
    </constructor-arg>
  </bean>
  
  <bean id="authorizationCodeServices" 
    class="org.springframework.security.oauth2.provider.code.InMemoryAuthorizationCodeServices">
  </bean>

  <!-- 
  <bean id="oauth2UserApprovalHandler"
    class="org.springframework.security.oauth2.provider.approval.DefaultUserApprovalHandler">
  </bean>
   -->
  <bean id="oauth2UserApprovalHandler"
    class="com.iems.security.oauth2.provider.approval.UserApprovalHandlerImpl">
    <property name="autoApproveClients">
      <set>
        <value>client_iems</value>
      </set>
    </property>
  </bean>

	<oauth2:authorization-server 
		client-details-service-ref="clientDetailsService" 
		token-services-ref="tokenServices" 
		user-approval-handler-ref="oauth2UserApprovalHandler">
		<oauth2:authorization-code />
		<oauth2:implicit />
		<oauth2:refresh-token />
		<oauth2:client-credentials />
		<oauth2:password authentication-manager-ref="authenticationManager" />
	</oauth2:authorization-server>


	<bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="oauth2AuthenticationManager" />
	</bean>


  <oauth2:resource-server id="apiResourceServer"
    resource-id="api-resource" token-services-ref="tokenServices" />

</beans>
